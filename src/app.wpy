<style lang="less">
@import './style/weui.less';
page{
    background-color: #F8F8F8;
    font-size: 16px;
    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
}
.page__hd {
    padding: 40px;
}
.page__bd {
    padding-bottom: 40px;
}
.page__bd_spacing {
    padding-left: 15px;
    padding-right: 15px;
}

.page__ft{
    padding-bottom: 10px;
    text-align: center;
}

.page__title {
    text-align: left;
    font-size: 20px;
    font-weight: 400;
}

.page__desc {
    margin-top: 5px;
    color: #888888;
    text-align: left;
    font-size: 14px;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import config from '@/config/index.js'
import {request} from '@/utils/request'


export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/demo',
      'pages/others',
      'pages/mine',
      'pages/BifurcationTerminal'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '分歧终端机',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      "selectedColor": "rgb(24, 141, 0)",
    list: [{
      "pagePath": "pages/BifurcationTerminal",
      "text": "首页",
        "iconPath": "res/room.png",
        "selectedIconPath": "res/room1.png"
    }, {
      "pagePath": "pages/mine",
      "text": "我的",
        "iconPath": "res/wo.png",
        "selectedIconPath": "res/wo1.png"
    }]
  },
  }

  globalData = {
    userInfo: null,
    token: null,
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify');
       // 拦截request请求
        this.intercept('request', {
            // 发出请求时的回调函数
            config (p) {
                // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
                p.timestamp = +new Date();
                console.log('config request: ', p);
                // 必须返回OBJECT参数对象，否则无法发送请求到服务端
                return p;
            },
            // 请求成功后的回调函数
            success (p) {
                // 可以在这里对收到的响应数据对象进行加工处理
                console.log('request success: ', p);
                // 必须返回响应数据对象，否则后续无法对响应数据进行处理
                return p;
            },
            //请求失败后的回调函数
            fail (p) {
                console.log('request fail: ', p);
                // 必须返回响应数据对象，否则后续无法对响应数据进行处理
                return p;
            },
            // 请求完成时的回调函数(请求成功或失败都会被执行)
            complete (p) {
                console.log('request complete: ', p);
            }
        });
  }

  onLaunch() {
    // this.testAsync()
    this.checkSession()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }
  checkSession() {
    // 从本地缓存中同步获取token
    let token = wx.getStorageSync('token')
    let that = this
    // 校验用户当前session_key是否有效
    wx.checkSession({
      success: function () {
        if (!token){
          // 没有token的话。登录
          that.login()
        } else {
          // 保存token到全局globalData
          that.globalData.token = token
          
            //由于这里是网络请求，可能会在 Page.onLoad 之后才返回
            // 所以此处加入 callback 以防止这种情况
            if (that.loginCallback){
                that.loginCallback()
            }
        }
      },
      fail: function () {
        //无效则重新登录
        console.log('failed')
        that.login()
      }
    })
  }
// 登录  请求小程序 code --> token
  login() {
    var that = this
    wx.login({
      success: function (res) {
        if (res.code) {
          //发起网络请求
          wx.request({
            url: `${config.HTTPPROTOCOL}${config.HOST}/api/wx/user/_login?code=${res.code}`,
            method: 'POST',
            success: response => {
              console.log(response)
              // 设置token
              wx.setStorageSync('token', response.data.data)
              that.globalData.token = response.data.data
              if (that.loginCallback){
                that.loginCallback(res)
              }
            }
          })
        } else {
          console.log('获取用户登录态失败！' + res.errMsg)
        }
      },
      fail: function(){
        console.log(1)
      }
    });
  }
  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        console.log(res)
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>

